---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Button from '../components/Button.astro';
import Table from '../components/Table.astro';
import CategoryTag from '../components/CategoryTag.astro';
import Modal from '../components/Modal.astro';
import { api, formatters } from '../lib/api.js';

// Fetch real data from the API
let expenses;
let expenseCategories;
let expenseStats;

try {
  expenses = await api.getTransactions({ type: 'expense' });
  expenseCategories = await api.getCategories('expense');
  
  // Calculate expense statistics
  const totalExpense = expenses.reduce((sum, exp) => sum + exp.amount, 0);
  const avgDaily = totalExpense / 30; // Assuming 30 days
  const transactionCount = expenses.length;
  
  expenseStats = {
    totalExpense,
    avgDaily,
    transactionCount
  };
} catch (error) {
  console.error('Error fetching expenses data:', error);
  expenses = [];
  expenseCategories = [];
  expenseStats = {
    totalExpense: 0,
    avgDaily: 0,
    transactionCount: 0
  };
}
---

<Layout title="FinanzApp - Gastos" currentPage="/expenses">
  <!-- Page Header -->
  <div class="page-header">
    <div class="header-content">
      <h1>Gastos</h1>
      <p>Gestiona todos tus gastos personales</p>
    </div>
    <div class="header-actions">
      <Button variant="outline" size="small">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
        </svg>
        Filtros
      </Button>
      <Button id="newExpenseBtn" variant="primary" size="small">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
        </svg>
        Nuevo Gasto
      </Button>
    </div>
  </div>

  <!-- Expense Summary Cards -->
  <div class="grid grid-3 mb-3">
    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon total-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Total Gastos</h3>
          <div class="summary-amount">{formatters.currency(expenseStats.totalExpense)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon avg-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Promedio Diario</h3>
          <div class="summary-amount">{formatters.currency(expenseStats.avgDaily)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon count-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Total Transacciones</h3>
          <div class="summary-amount">{expenseStats.transactionCount}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>
  </div>

  <!-- Expenses Table -->
  <Card 
    title="Lista de Gastos" 
    icon="<path d='M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z'/>"
  >
    {expenses.length > 0 ? (
      <Table headers={['Descripción', 'Categoría', 'Monto', 'Fecha', 'Acciones']}>
        {expenses.map(expense => (
          <tr>
            <td>{expense.description}</td>
            <td>
              <CategoryTag 
                category={expense.category_name} 
                color={expense.category_color}
                icon={expense.category_icon}
              />
            </td>
            <td class="amount">{formatters.currency(expense.amount)}</td>
            <td>{formatters.date(expense.date)}</td>
            <td>
              <div class="table-actions">
                <button class="action-btn edit-btn" onclick={`editExpense(${expense.id})`}>
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
                  </svg>
                </button>
                <button class="action-btn delete-btn" onclick={`deleteExpense(${expense.id})`}>
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                  </svg>
                </button>
              </div>
            </td>
          </tr>
        ))}
      </Table>
    ) : (
      <div class="empty-state">
        <p>No hay gastos registrados</p>
      </div>
    )}
  </Card>

  <!-- New Expense Modal -->
  <Modal id="newExpenseModal" title="Nuevo Gasto">
    <form class="expense-form" onsubmit="saveExpense(event)">
      <div class="form-group">
        <label for="expenseDescription">Descripción</label>
        <input type="text" id="expenseDescription" name="description" required placeholder="Ej: Supermercado">
      </div>
      
      <div class="form-group">
        <label for="expenseCategory">Categoría</label>
        <select id="expenseCategory" name="category" required>
          <option value="">Selecciona una categoría</option>
          {expenseCategories.map(category => (
            <option value={category.id}>{category.icon} {category.name}</option>
          ))}
        </select>
      </div>
      
      <div class="form-group">
        <label for="expenseAmount">Monto</label>
        <input type="number" id="expenseAmount" name="amount" step="0.01" min="0" required placeholder="0.00">
      </div>
      
      <div class="form-group">
        <label for="expenseDate">Fecha</label>
        <input type="date" id="expenseDate" name="date" required>
      </div>
      
      <div class="form-actions">
        <button id="closeModalBtn" type="button" class="btn-secondary" onclick={"closeModal()"}>Cancelar</button>
        <button type="submit" class="btn-primary">Guardar Gasto</button>
      </div>
    </form>
  </Modal>

  <style>
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }

    .header-content h1 {
      color: #ffffff;
      font-size: 32px;
      font-weight: 700;
      margin-bottom: 8px;
    }

    .header-content p {
      color: #cccccc;
      font-size: 16px;
    }

    .header-actions {
      display: flex;
      gap: 12px;
    }

    .summary-card {
      background: #1A1A1A !important;
      border: 1px solid #333;
    }

    .summary-content {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .summary-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    .total-icon {
      background: linear-gradient(135deg, #F44336, #d32f2f);
    }

    .avg-icon {
      background: linear-gradient(135deg, #FF9800, #f57c00);
    }

    .count-icon {
      background: linear-gradient(135deg, #2196F3, #1976D2);
    }

    .summary-info h3 {
      color: #cccccc;
      font-size: 14px;
      font-weight: 500;
      margin-bottom: 4px;
    }

    .summary-amount {
      color: #ffffff;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
    }

    .summary-period {
      color: #888888;
      font-size: 12px;
    }

    .amount {
      font-weight: 600;
      color: #F44336;
    }

    .table-actions {
      display: flex;
      gap: 8px;
    }

    .action-btn {
      width: 32px;
      height: 32px;
      border: none;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .edit-btn {
      background: #2196F3;
      color: white;
    }

    .edit-btn:hover {
      background: #1976D2;
    }

    .delete-btn {
      background: #F44336;
      color: white;
    }

    .delete-btn:hover {
      background: #d32f2f;
    }

    .expense-form {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .form-group label {
      color: #ffffff;
      font-size: 14px;
      font-weight: 500;
    }

    .form-group input,
    .form-group select {
      padding: 12px;
      border: 1px solid #333;
      border-radius: 8px;
      background: #2C2C2C;
      color: #ffffff;
      font-size: 14px;
    }

    .form-group input:focus,
    .form-group select:focus {
      outline: none;
      border-color: #6366f1;
    }

    .form-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 20px;
    }

    .btn-primary,
    .btn-secondary {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-primary {
      background: #6366f1;
      color: white;
    }

    .btn-primary:hover {
      background: #4f46e5;
    }

    .btn-secondary {
      background: #2C2C2C;
      color: #ffffff;
      border: 1px solid #333;
    }

    .btn-secondary:hover {
      background: #333;
    }

    .empty-state {
      text-align: center;
      padding: 40px;
      color: #888888;
    }

    .empty-state p {
      font-size: 16px;
    }
  </style>

  <script define:vars={{ expenseCategories }}>
    // Set today's date as default
    document.addEventListener('DOMContentLoaded', function() {
      const today = new Date().toISOString().split('T')[0];
      const dateInput = document.getElementById('expenseDate');
      if (dateInput) {
        dateInput.value = today;
      }
    });

    function openNewExpenseModal() {
      const modal = document.getElementById('newExpenseModal');
      if (modal) {
        modal.classList.add('show');
      }
    }

    function closeNewExpenseModal() {
      const modal = document.getElementById('newExpenseModal');
      if (modal) {
        modal.classList.remove('show');
        // Reset form
        document.querySelector('.expense-form').reset();
        const today = new Date().toISOString().split('T')[0];
        const dateInput = document.getElementById('expenseDate');
        if (dateInput) {
          dateInput.value = today;
        }
      }
    }

    document.querySelector('.expense-form').addEventListener('submit', async function(event) {
      event.preventDefault();
      
      const formData = new FormData(event.target);
      const expenseData = {
        categoryId: parseInt(formData.get('category')),
        type: 'expense',
        amount: parseFloat(formData.get('amount')),
        description: formData.get('description'),
        date: formData.get('date')
      };

      console.log(expenseData);
      try {
        const response = await fetch('/api/transactions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(expenseData)
        });
        console.log(response);
        if (response.ok) {
          closeModal();
          // Reload page to show new data
          window.location.reload();
        } else {
          const error = await response.json();
          alert('Error al guardar el gasto: ' + error.error);
        }
      } catch (error) {
        console.error('Error saving expense:', error);
        alert('Error al guardar el gasto');
      }
    });

    async function editExpense(id) {
      // TODO: Implement edit functionality
      console.log('Edit expense:', id);
    }

    async function deleteExpense(id) {
      if (confirm('¿Estás seguro de que quieres eliminar este gasto?')) {
        try {
          const response = await fetch(`/api/transactions?id=${id}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            // Reload page to show updated data
            window.location.reload();
          } else {
            const error = await response.json();
            alert('Error al eliminar el gasto: ' + error.error);
          }
        } catch (error) {
          console.error('Error deleting expense:', error);
          alert('Error al eliminar el gasto');
        }
      }
    }

    const button = document.getElementById('newExpenseBtn');
    console.log(button);
    if (button) {
      button.addEventListener('click', () => {
        const modal = document.getElementById('newExpenseModal');
        if (modal) {
        modal.showModal();
      }
    });
    }

    const closeModal = () => {
      const modal = document.getElementById('newExpenseModal');
      if (modal) {
        modal.close();
      }
    }

    const closeModalBtn = document.getElementById('closeModalBtn');
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', () => {
        closeModal();
      });
    }
    
  </script>
</Layout> 