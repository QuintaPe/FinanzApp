---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Button from '../components/Button.astro';
import Table from '../components/Table.astro';
import CategoryTag from '../components/CategoryTag.astro';
import Dashboard from '../repository/Dashboard.js';
import { formatters } from '../utils/index.js';

// Fetch real data from the API
let dashboardData;
let recentTransactions;
let goals = [];

try {
  dashboardData = await Dashboard.getDashboardData();
  goals = [];
} catch (error) {
  console.error('Error fetching dashboard data:', error);
  // Fallback data
  dashboardData = {
    totalIncome: 0,
    totalExpense: 0,
    balance: 0,
    categoriesData: [],
    monthlyData: []
  };
  recentTransactions = dashboardData?.recentTransactions || [];
  goals = [];
}
---

<Layout title="FinanzApp - Dashboard" currentPage="/">
  <!-- Dashboard Header -->
  <div class="dashboard-header">
    <h1>Dashboard Financiero</h1>
    <div class="header-actions">
      <Button variant="outline" size="small">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
        </svg>
        Filtros
      </Button>
    </div>
  </div>

  <!-- Financial Summary Cards -->
  <div class="grid grid-4 mb-3">
    <Card class="summary-card income-card">
      <div class="summary-content">
        <div class="summary-icon income-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"/>
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Ingresos</h3>
          <div class="summary-amount">{formatters.currency(dashboardData.totalIncome)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card expense-card">
      <div class="summary-content">
        <div class="summary-icon expense-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Gastos</h3>
          <div class="summary-amount">{formatters.currency(dashboardData.totalExpense)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card savings-card">
      <div class="summary-content">
        <div class="summary-icon savings-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Ahorros</h3>
          <div class="summary-amount">{formatters.currency(dashboardData.balance)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card balance-card">
      <div class="summary-content">
        <div class="summary-icon balance-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Balance</h3>
          <div class="summary-amount">{formatters.currency(dashboardData.balance)}</div>
          <div class="summary-period">Total</div>
        </div>
      </div>
    </Card>
  </div>

  <!-- Quick Actions and Recent Transactions -->
  <div class="grid grid-2 mb-3">
    <!-- Quick Actions -->
    <Card 
      title="Acciones Rápidas" 
      icon="<path fill-rule='evenodd' d='M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z' clip-rule='evenodd'/>"
    >
      <div class="quick-actions">
        <button class="quick-action-btn" onclick="openNewExpenseModal()">
          <svg class="quick-action-icon" fill="currentColor" viewBox="0 0 20 20" style="color: #F44336;">
            <path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"/>
          </svg>
          Nuevo gasto
        </button>
        <button class="quick-action-btn" onclick="openNewIncomeModal()">
          <svg class="quick-action-icon" fill="currentColor" viewBox="0 0 20 20" style="color: #4CAF50;">
            <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"/>
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"/>
          </svg>
          Nuevo ingreso
        </button>
        <button class="quick-action-btn" onclick="openBudgetModal()">
          <svg class="quick-action-icon" fill="currentColor" viewBox="0 0 20 20" style="color: #2196F3;">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
          Nuevo presupuesto
        </button>
        <button class="quick-action-btn" onclick="openGoalModal()">
          <svg class="quick-action-icon" fill="currentColor" viewBox="0 0 20 20" style="color: #9C27B0;">
            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          Nueva meta
        </button>
      </div>
    </Card>

    <!-- Recent Transactions -->
    <Card 
      title="Transacciones Recientes" 
      icon="<path d='M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z'/>"
    >
      {recentTransactions?.length > 0 ? (
        <Table headers={['Descripción', 'Categoría', 'Tipo', 'Monto', 'Fecha']}>
          {recentTransactions.map((transaction: any) => (
            <tr>
              <td>{transaction.description}</td>
              <td>
                <CategoryTag 
                  category={transaction.category_name} 
                  color={transaction.category_color}
                  icon={transaction.category_icon}
                />
              </td>
              <td>
                <span class={`transaction-type ${transaction.type}`}>
                  {transaction.type === 'income' ? 'Ingreso' : 'Gasto'}
                </span>
              </td>
              <td class={`amount ${transaction.type}`}>
                {transaction.type === 'income' ? '+' : '-'}{formatters.currency(transaction.amount)}
              </td>
              <td>{formatters.date(transaction.date)}</td>
            </tr>
          ))}
        </Table>
      ) : (
        <div class="empty-state">
          <p>No hay transacciones recientes</p>
        </div>
      )}
    </Card>
  </div>

  <!-- Charts Row -->
  <div class="grid grid-2">
    <Card 
      title="Resumen Mensual" 
      icon="<path d='M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z'/>"
    >
      <div class="chart-container">
        <canvas id="monthlyOverviewChart"></canvas>
      </div>
    </Card>

    <Card 
      title="Gastos por Categoría" 
      icon="<path d='M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z'/>"
    >
      <div class="chart-container">
        <canvas id="expenseCategoriesChart"></canvas>
      </div>
    </Card>
  </div>

  <!-- Financial Goals -->
  <Card 
    title="Metas Financieras" 
    icon="<path fill-rule='evenodd' d='M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z' clip-rule='evenodd'/>"
  >
    {goals.length > 0 ? (
      <div class="goals-grid">
        {goals.map((goal: any) => {
          const percentage = goal.target_amount > 0 ? (goal.current_amount / goal.target_amount) * 100 : 0;
          return (
            <div class="goal-item">
              <div class="goal-info">
                <h4>{goal.name}</h4>
                <p>{formatters.currency(goal.current_amount)} / {formatters.currency(goal.target_amount)}</p>
                <div class="progress-bar">
                  <div class="progress-fill" style={`width: ${Math.min(percentage, 100)}%`}></div>
                </div>
              </div>
              <div class="goal-percentage">{percentage.toFixed(0)}%</div>
            </div>
          );
        })}
      </div>
    ) : (
      <div class="empty-state">
        <p>No hay metas financieras configuradas</p>
      </div>
    )}
  </Card>

  <style>
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }

    .dashboard-header h1 {
      color: #ffffff;
      font-size: 32px;
      font-weight: 700;
    }

    .header-actions {
      display: flex;
      gap: 12px;
    }

    .summary-card {
      background: #1A1A1A !important;
      border: 1px solid #333;
    }

    .summary-content {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .summary-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    .income-icon {
      background: linear-gradient(135deg, #4CAF50, #45a049);
    }

    .expense-icon {
      background: linear-gradient(135deg, #F44336, #d32f2f);
    }

    .savings-icon {
      background: linear-gradient(135deg, #2196F3, #1976D2);
    }

    .balance-icon {
      background: linear-gradient(135deg, #9C27B0, #7B1FA2);
    }

    .summary-info h3 {
      color: #cccccc;
      font-size: 14px;
      font-weight: 500;
      margin-bottom: 4px;
    }

    .summary-amount {
      color: #ffffff;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
    }

    .summary-period {
      color: #888888;
      font-size: 12px;
    }

    .quick-actions {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
    }

    .quick-action-btn {
      background: #2C2C2C;
      border: none;
      border-radius: 12px;
      padding: 20px;
      color: #ffffff;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 12px;
      width: 100%;
    }

    .quick-action-btn:hover {
      background: #333;
      transform: translateY(-2px);
    }

    .quick-action-icon {
      width: 24px;
      height: 24px;
    }

    .transaction-type {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 500;
      text-transform: uppercase;
    }

    .transaction-type.income {
      background: #4CAF50;
      color: white;
    }

    .transaction-type.expense {
      background: #F44336;
      color: white;
    }

    .amount {
      font-weight: 600;
    }

    .amount.income {
      color: #4CAF50;
    }

    .amount.expense {
      color: #F44336;
    }

    .chart-container {
      height: 300px;
      position: relative;
    }

    .goals-grid {
      display: grid;
      gap: 20px;
    }

    .goal-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px;
      background: #2C2C2C;
      border-radius: 8px;
    }

    .goal-info {
      flex: 1;
    }

    .goal-info h4 {
      color: #ffffff;
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 8px;
    }

    .goal-info p {
      color: #cccccc;
      font-size: 14px;
      margin-bottom: 8px;
    }

    .progress-bar {
      width: 100%;
      height: 8px;
      background: #333;
      border-radius: 4px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #4CAF50, #45a049);
      border-radius: 4px;
      transition: width 0.3s ease;
    }

    .goal-percentage {
      color: #4CAF50;
      font-size: 18px;
      font-weight: 700;
      margin-left: 16px;
    }

    .empty-state {
      text-align: center;
      padding: 40px;
      color: #888888;
    }

    .empty-state p {
      font-size: 16px;
    }
  </style>

  <script define:vars={{ dashboardData, goals }}>
    // Initialize charts when the page loads
    document.addEventListener('DOMContentLoaded', function() {
      createMonthlyOverviewChart();
      createExpenseCategoriesChart();
    });

    function createMonthlyOverviewChart() {
      const ctx = document.getElementById('monthlyOverviewChart');
      if (!ctx) return;

      // Use real data from the server
      const monthlyData = dashboardData.monthlyData || [];
      const labels = monthlyData.map(item => {
        const date = new Date(item.month + '-01');
        return date.toLocaleDateString('es-ES', { month: 'short' });
      });
      
      const incomeData = monthlyData.map(item => item.income || 0);
      const expenseData = monthlyData.map(item => item.expense || 0);

      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Ingresos',
              data: incomeData,
              backgroundColor: '#4CAF50',
              borderColor: '#45a049',
              borderWidth: 1
            },
            {
              label: 'Gastos',
              data: expenseData,
              backgroundColor: '#F44336',
              borderColor: '#d32f2f',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                color: '#cccccc',
                callback: function(value) {
                  return '€' + value;
                }
              },
              grid: {
                color: '#444'
              }
            },
            x: {
              ticks: {
                color: '#cccccc'
              },
              grid: {
                color: '#444'
              }
            }
          },
          plugins: {
            legend: {
              labels: {
                color: '#cccccc'
              }
            }
          }
        }
      });
    }

    function createExpenseCategoriesChart() {
      const ctx = document.getElementById('expenseCategoriesChart');
      if (!ctx) return;

      // Use real data from the server
      const categoriesData = dashboardData.categoriesData || [];
      const labels = categoriesData.map(item => item.name);
      const data = categoriesData.map(item => item.total || 0);
      const colors = categoriesData.map(item => item.color || '#9E9E9E');

      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: colors,
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: '#cccccc',
                padding: 20
              }
            }
          }
        }
      });
    }

    // Modal functions
    function openNewExpenseModal() {
      console.log('Opening new expense modal');
      window.location.href = '/expenses';
    }

    function openNewIncomeModal() {
      console.log('Opening new income modal');
      window.location.href = '/income';
    }

    function openBudgetModal() {
      console.log('Opening budget modal');
      window.location.href = '/budgets';
    }

    function openGoalModal() {
      console.log('Opening goal modal');
      window.location.href = '/goals';
    }
  </script>
</Layout>
