---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Button from '../components/Button.astro';
import Table from '../components/Table.astro';
import CategoryTag from '../components/CategoryTag.astro';
import Modal from '../components/Modal.astro';
import Transaction from '../repository/Transaction.js';
import Category from '../repository/Category.js';
import { formatters } from '../utils/index.js';

// Fetch real data from the API
let incomes;
let incomeCategories;
let incomeStats;

try {
  incomes = await Transaction.getTransactions({ type: 'income' });
  incomeCategories = await Category.getCategories('income');
  
  // Calculate income statistics
  const totalIncome = incomes.reduce((sum, inc) => sum + inc.amount, 0);
  const avgDaily = totalIncome / 30; // Assuming 30 days
  const transactionCount = incomes.length;
  
  incomeStats = {
    totalIncome,
    avgDaily,
    transactionCount
  };
} catch (error) {
  console.error('Error fetching income data:', error);
  incomes = [];
  incomeCategories = [];
  incomeStats = {
    totalIncome: 0,
    avgDaily: 0,
    transactionCount: 0
  };
}
---

<Layout title="FinanzApp - Ingresos" currentPage="/income">
  <!-- Page Header -->
  <div class="page-header">
    <div class="header-content">
      <h1>Ingresos</h1>
      <p>Gestiona todos tus ingresos personales</p>
    </div>
    <div class="header-actions">
      <Button variant="outline" size="small">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
        </svg>
        Filtros
      </Button>
      <Button variant="primary" size="small" onclick="openNewIncomeModal()">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
        </svg>
        Nuevo Ingreso
      </Button>
    </div>
  </div>

  <!-- Income Summary Cards -->
  <div class="grid grid-3 mb-3">
    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon total-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"/>
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Total Ingresos</h3>
          <div class="summary-amount">{formatters.currency(incomeStats.totalIncome)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon avg-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Promedio Diario</h3>
          <div class="summary-amount">{formatters.currency(incomeStats.avgDaily)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon count-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Total Transacciones</h3>
          <div class="summary-amount">{incomeStats.transactionCount}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>
  </div>

  <!-- Income Table -->
  <Card 
    title="Lista de Ingresos" 
    icon="<path d='M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z'/>"
  >
    {incomes.length > 0 ? (
      <Table headers={['Descripción', 'Categoría', 'Monto', 'Fecha', 'Acciones']}>
        {incomes.map(income => (
          <tr>
            <td>{income.description}</td>
            <td>
              <CategoryTag 
                category={income.category_name} 
                color={income.category_color}
                icon={income.category_icon}
              />
            </td>
            <td class="amount">{formatters.currency(income.amount)}</td>
            <td>{formatters.date(income.date)}</td>
            <td>
              <div class="table-actions">
                <button class="action-btn edit-btn" onclick={`editIncome(${income.id})`}>
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
                  </svg>
                </button>
                <button class="action-btn delete-btn" onclick={`deleteIncome(${income.id})`}>
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                  </svg>
                </button>
              </div>
            </td>
          </tr>
        ))}
      </Table>
    ) : (
      <div class="empty-state">
        <p>No hay ingresos registrados</p>
      </div>
    )}
  </Card>

  <!-- New Income Modal -->
  <Modal id="newIncomeModal" title="Nuevo Ingreso">
    <form class="income-form" onsubmit="saveIncome(event)">
      <div class="form-group">
        <label for="incomeDescription">Descripción</label>
        <input type="text" id="incomeDescription" name="description" required placeholder="Ej: Salario mensual">
      </div>
      
      <div class="form-group">
        <label for="incomeCategory">Categoría</label>
        <select id="incomeCategory" name="category" required>
          <option value="">Selecciona una categoría</option>
          {incomeCategories.map(category => (
            <option value={category.id}>{category.icon} {category.name}</option>
          ))}
        </select>
      </div>
      
      <div class="form-group">
        <label for="incomeAmount">Monto</label>
        <input type="number" id="incomeAmount" name="amount" step="0.01" min="0" required placeholder="0.00">
      </div>
      
      <div class="form-group">
        <label for="incomeDate">Fecha</label>
        <input type="date" id="incomeDate" name="date" required>
      </div>
      
      <div class="form-actions">
        <button type="button" class="btn-secondary" onclick="closeNewIncomeModal()">Cancelar</button>
        <button type="submit" class="btn-primary">Guardar Ingreso</button>
      </div>
    </form>
  </Modal>

  <style>
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }

    .header-content h1 {
      color: #ffffff;
      font-size: 32px;
      font-weight: 700;
      margin-bottom: 8px;
    }

    .header-content p {
      color: #cccccc;
      font-size: 16px;
    }

    .header-actions {
      display: flex;
      gap: 12px;
    }

    .summary-card {
      background: #1A1A1A !important;
      border: 1px solid #333;
    }

    .summary-content {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .summary-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    .total-icon {
      background: linear-gradient(135deg, #4CAF50, #45a049);
    }

    .avg-icon {
      background: linear-gradient(135deg, #FF9800, #f57c00);
    }

    .count-icon {
      background: linear-gradient(135deg, #2196F3, #1976D2);
    }

    .summary-info h3 {
      color: #cccccc;
      font-size: 14px;
      font-weight: 500;
      margin-bottom: 4px;
    }

    .summary-amount {
      color: #ffffff;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
    }

    .summary-period {
      color: #888888;
      font-size: 12px;
    }

    .amount {
      font-weight: 600;
      color: #4CAF50;
    }

    .table-actions {
      display: flex;
      gap: 8px;
    }

    .action-btn {
      width: 32px;
      height: 32px;
      border: none;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .edit-btn {
      background: #2196F3;
      color: white;
    }

    .edit-btn:hover {
      background: #1976D2;
    }

    .delete-btn {
      background: #F44336;
      color: white;
    }

    .delete-btn:hover {
      background: #d32f2f;
    }

    .income-form {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .form-group label {
      color: #ffffff;
      font-size: 14px;
      font-weight: 500;
    }

    .form-group input,
    .form-group select {
      padding: 12px;
      border: 1px solid #333;
      border-radius: 8px;
      background: #2C2C2C;
      color: #ffffff;
      font-size: 14px;
    }

    .form-group input:focus,
    .form-group select:focus {
      outline: none;
      border-color: #6366f1;
    }

    .form-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 20px;
    }

    .btn-primary,
    .btn-secondary {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-primary {
      background: #6366f1;
      color: white;
    }

    .btn-primary:hover {
      background: #4f46e5;
    }

    .btn-secondary {
      background: #2C2C2C;
      color: #ffffff;
      border: 1px solid #333;
    }

    .btn-secondary:hover {
      background: #333;
    }

    .empty-state {
      text-align: center;
      padding: 40px;
      color: #888888;
    }

    .empty-state p {
      font-size: 16px;
    }
  </style>

  <script define:vars={{ incomeCategories }}>
    // Set today's date as default
    document.addEventListener('DOMContentLoaded', function() {
      const today = new Date().toISOString().split('T')[0];
      const dateInput = document.getElementById('incomeDate');
      if (dateInput) {
        dateInput.value = today;
      }
    });

    function openNewIncomeModal() {
      const modal = document.getElementById('newIncomeModal');
      if (modal) {
        modal.classList.add('show');
      }
    }

    function closeNewIncomeModal() {
      const modal = document.getElementById('newIncomeModal');
      if (modal) {
        modal.classList.remove('show');
        // Reset form
        document.querySelector('.income-form').reset();
        const today = new Date().toISOString().split('T')[0];
        const dateInput = document.getElementById('incomeDate');
        if (dateInput) {
          dateInput.value = today;
        }
      }
    }

    async function saveIncome(event) {
      event.preventDefault();
      
      const formData = new FormData(event.target);
      const incomeData = {
        categoryId: parseInt(formData.get('category')),
        type: 'income',
        amount: parseFloat(formData.get('amount')),
        description: formData.get('description'),
        date: formData.get('date')
      };

      try {
        const response = await fetch('/api/transactions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(incomeData)
        });

        if (response.ok) {
          closeNewIncomeModal();
          // Reload page to show new data
          window.location.reload();
        } else {
          const error = await response.json();
          alert('Error al guardar el ingreso: ' + error.error);
        }
      } catch (error) {
        console.error('Error saving income:', error);
        alert('Error al guardar el ingreso');
      }
    }

    async function editIncome(id) {
      // TODO: Implement edit functionality
      console.log('Edit income:', id);
    }

    async function deleteIncome(id) {
      if (confirm('¿Estás seguro de que quieres eliminar este ingreso?')) {
        try {
          const response = await fetch(`/api/transactions?id=${id}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            // Reload page to show updated data
            window.location.reload();
          } else {
            const error = await response.json();
            alert('Error al eliminar el ingreso: ' + error.error);
          }
        } catch (error) {
          console.error('Error deleting income:', error);
          alert('Error al eliminar el ingreso');
        }
      }
    }

    // Close modal when clicking outside
    document.addEventListener('click', function(event) {
      const modal = document.getElementById('newIncomeModal');
      if (event.target === modal) {
        closeNewIncomeModal();
      }
    });
  </script>
</Layout> 