---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Button from '../components/Button.astro';
import Table from '../components/Table.astro';
import CategoryTag from '../components/CategoryTag.astro';
import Modal from '../components/Modal.astro';
import Budget from '../repository/Budget.js';
import Category from '../repository/Category.js';

import { formatters } from '../utils/index.js';

// Fetch real data from the API
let budgets;
let expenseCategories;
let budgetStats;

try {
  budgets = await Budget.getBudgets();
  expenseCategories = await Category.getCategories('expense');
  
  // Calculate budget statistics
  const totalBudget = budgets.reduce((sum, budget) => sum + budget.amount, 0);
  const totalSpent = budgets.reduce((sum, budget) => sum + (budget.spent || 0), 0);
  const remainingBudget = totalBudget - totalSpent;
  
  budgetStats = {
    totalBudget,
    totalSpent,
    remainingBudget,
    budgetCount: budgets.length
  };
} catch (error) {
  console.error('Error fetching budgets data:', error);
  budgets = [];
  expenseCategories = [];
  budgetStats = {
    totalBudget: 0,
    totalSpent: 0,
    remainingBudget: 0,
    budgetCount: 0
  };
}
---

<Layout title="FinanzApp - Presupuestos" currentPage="/budgets">
  <!-- Page Header -->
  <div class="page-header">
    <div class="header-content">
      <h1>Presupuestos</h1>
      <p>Gestiona tus presupuestos por categoría</p>
    </div>
    <div class="header-actions">
      <Button variant="primary" size="small" onclick="openNewBudgetModal()">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
        </svg>
        Nuevo Presupuesto
      </Button>
    </div>
  </div>

  <!-- Budget Summary Cards -->
  <div class="grid grid-4 mb-3">
    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon total-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Presupuesto Total</h3>
          <div class="summary-amount">{formatters.currency(budgetStats.totalBudget)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon spent-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Gastado</h3>
          <div class="summary-amount">{formatters.currency(budgetStats.totalSpent)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon remaining-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Restante</h3>
          <div class="summary-amount">{formatters.currency(budgetStats.remainingBudget)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon count-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Presupuestos</h3>
          <div class="summary-amount">{budgetStats.budgetCount}</div>
          <div class="summary-period">Activos</div>
        </div>
      </div>
    </Card>
  </div>

  <!-- Budgets Table -->
  <Card 
    title="Lista de Presupuestos" 
    icon="<path fill-rule='evenodd' d='M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z' clip-rule='evenodd'/>"
  >
    {budgets.length > 0 ? (
      <Table headers={['Categoría', 'Presupuesto', 'Gastado', 'Restante', 'Progreso', 'Acciones']}>
        {budgets.map(budget => {
          const spent = budget.spent || 0;
          const remaining = budget.amount - spent;
          const percentage = budget.amount > 0 ? (spent / budget.amount) * 100 : 0;
          const isOverBudget = spent > budget.amount;
          
          return (
            <tr>
              <td>
                <CategoryTag 
                  category={budget.category_name} 
                  color={budget.category_color}
                  icon={budget.category_icon}
                />
              </td>
              <td class="amount">{formatters.currency(budget.amount)}</td>
              <td class={`amount ${isOverBudget ? 'over-budget' : ''}`}>
                {formatters.currency(spent)}
              </td>
              <td class={`amount ${remaining < 0 ? 'over-budget' : ''}`}>
                {formatters.currency(remaining)}
              </td>
              <td>
                <div class="progress-container">
                  <div class="progress-bar">
                    <div 
                      class={`progress-fill ${isOverBudget ? 'over-budget' : ''}`} 
                      style={`width: ${Math.min(percentage, 100)}%`}
                    ></div>
                  </div>
                  <span class="progress-text">{percentage.toFixed(1)}%</span>
                </div>
              </td>
              <td>
                <div class="table-actions">
                  <button class="action-btn edit-btn" onclick={`editBudget(${budget.id})`}>
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
                    </svg>
                  </button>
                  <button class="action-btn delete-btn" onclick={`deleteBudget(${budget.id})`}>
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                    </svg>
                  </button>
                </div>
              </td>
            </tr>
          );
        })}
      </Table>
    ) : (
      <div class="empty-state">
        <p>No hay presupuestos configurados</p>
      </div>
    )}
  </Card>

  <!-- New Budget Modal -->
  <Modal id="newBudgetModal" title="Nuevo Presupuesto">
    <form class="budget-form" onsubmit="saveBudget(event)">
      <div class="form-group">
        <label for="budgetCategory">Categoría</label>
        <select id="budgetCategory" name="category" required>
          <option value="">Selecciona una categoría</option>
          {expenseCategories.map(category => (
            <option value={category.id}>{category.icon} {category.name}</option>
          ))}
        </select>
      </div>
      
      <div class="form-group">
        <label for="budgetAmount">Monto del Presupuesto</label>
        <input type="number" id="budgetAmount" name="amount" step="0.01" min="0" required placeholder="0.00">
      </div>
      
      <div class="form-group">
        <label for="budgetPeriod">Período</label>
        <select id="budgetPeriod" name="period" required>
          <option value="monthly">Mensual</option>
          <option value="yearly">Anual</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="budgetStartDate">Fecha de Inicio</label>
        <input type="date" id="budgetStartDate" name="startDate" required>
      </div>
      
      <div class="form-actions">
        <button type="button" class="btn-secondary" onclick="closeNewBudgetModal()">Cancelar</button>
        <button type="submit" class="btn-primary">Guardar Presupuesto</button>
      </div>
    </form>
  </Modal>

  <style>
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }

    .header-content h1 {
      color: #ffffff;
      font-size: 32px;
      font-weight: 700;
      margin-bottom: 8px;
    }

    .header-content p {
      color: #cccccc;
      font-size: 16px;
    }

    .header-actions {
      display: flex;
      gap: 12px;
    }

    .summary-card {
      background: #1A1A1A !important;
      border: 1px solid #333;
    }

    .summary-content {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .summary-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    .total-icon {
      background: linear-gradient(135deg, #2196F3, #1976D2);
    }

    .spent-icon {
      background: linear-gradient(135deg, #F44336, #d32f2f);
    }

    .remaining-icon {
      background: linear-gradient(135deg, #4CAF50, #45a049);
    }

    .count-icon {
      background: linear-gradient(135deg, #9C27B0, #7B1FA2);
    }

    .summary-info h3 {
      color: #cccccc;
      font-size: 14px;
      font-weight: 500;
      margin-bottom: 4px;
    }

    .summary-amount {
      color: #ffffff;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
    }

    .summary-period {
      color: #888888;
      font-size: 12px;
    }

    .amount {
      font-weight: 600;
    }

    .amount.over-budget {
      color: #F44336;
    }

    .progress-container {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .progress-bar {
      flex: 1;
      height: 8px;
      background: #333;
      border-radius: 4px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #4CAF50, #45a049);
      border-radius: 4px;
      transition: width 0.3s ease;
    }

    .progress-fill.over-budget {
      background: linear-gradient(90deg, #F44336, #d32f2f);
    }

    .progress-text {
      color: #cccccc;
      font-size: 12px;
      font-weight: 500;
      min-width: 40px;
    }

    .table-actions {
      display: flex;
      gap: 8px;
    }

    .action-btn {
      width: 32px;
      height: 32px;
      border: none;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .edit-btn {
      background: #2196F3;
      color: white;
    }

    .edit-btn:hover {
      background: #1976D2;
    }

    .delete-btn {
      background: #F44336;
      color: white;
    }

    .delete-btn:hover {
      background: #d32f2f;
    }

    .budget-form {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .form-group label {
      color: #ffffff;
      font-size: 14px;
      font-weight: 500;
    }

    .form-group input,
    .form-group select {
      padding: 12px;
      border: 1px solid #333;
      border-radius: 8px;
      background: #2C2C2C;
      color: #ffffff;
      font-size: 14px;
    }

    .form-group input:focus,
    .form-group select:focus {
      outline: none;
      border-color: #6366f1;
    }

    .form-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 20px;
    }

    .btn-primary,
    .btn-secondary {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-primary {
      background: #6366f1;
      color: white;
    }

    .btn-primary:hover {
      background: #4f46e5;
    }

    .btn-secondary {
      background: #2C2C2C;
      color: #ffffff;
      border: 1px solid #333;
    }

    .btn-secondary:hover {
      background: #333;
    }

    .empty-state {
      text-align: center;
      padding: 40px;
      color: #888888;
    }

    .empty-state p {
      font-size: 16px;
    }
  </style>

  <script define:vars={{ expenseCategories }}>
    // Set today's date as default
    document.addEventListener('DOMContentLoaded', function() {
      const today = new Date().toISOString().split('T')[0];
      const dateInput = document.getElementById('budgetStartDate');
      if (dateInput) {
        dateInput.value = today;
      }
    });

    function openNewBudgetModal() {
      const modal = document.getElementById('newBudgetModal');
      if (modal) {
        modal.classList.add('show');
      }
    }

    function closeNewBudgetModal() {
      const modal = document.getElementById('newBudgetModal');
      if (modal) {
        modal.classList.remove('show');
        // Reset form
        document.querySelector('.budget-form').reset();
        const today = new Date().toISOString().split('T')[0];
        const dateInput = document.getElementById('budgetStartDate');
        if (dateInput) {
          dateInput.value = today;
        }
      }
    }

    async function saveBudget(event) {
      event.preventDefault();
      
      const formData = new FormData(event.target);
      const budgetData = {
        categoryId: parseInt(formData.get('category')),
        amount: parseFloat(formData.get('amount')),
        period: formData.get('period'),
        startDate: formData.get('startDate')
      };

      try {
        const response = await fetch('/api/budgets', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(budgetData)
        });

        if (response.ok) {
          closeNewBudgetModal();
          // Reload page to show new data
          window.location.reload();
        } else {
          const error = await response.json();
          alert('Error al guardar el presupuesto: ' + error.error);
        }
      } catch (error) {
        console.error('Error saving budget:', error);
        alert('Error al guardar el presupuesto');
      }
    }

    async function editBudget(id) {
      // TODO: Implement edit functionality
      console.log('Edit budget:', id);
    }

    async function deleteBudget(id) {
      if (confirm('¿Estás seguro de que quieres eliminar este presupuesto?')) {
        // TODO: Implement delete functionality
        console.log('Delete budget:', id);
      }
    }

    // Close modal when clicking outside
    document.addEventListener('click', function(event) {
      const modal = document.getElementById('newBudgetModal');
      if (event.target === modal) {
        closeNewBudgetModal();
      }
    });
  </script>
</Layout> 