---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Button from '../components/Button.astro';
import { api, formatters } from '../lib/api.js';

// Fetch real data from the API
let monthlyReport;
let categoryReport;
let trendReport;

try {
  monthlyReport = await api.getReports('monthly');
  categoryReport = await api.getReports('category');
  trendReport = await api.getReports('trend');
} catch (error) {
  console.error('Error fetching reports data:', error);
  monthlyReport = {
    income: 0,
    expense: 0,
    balance: 0,
    data: []
  };
  categoryReport = {
    categories: [],
    total: 0
  };
  trendReport = {
    months: [],
    income: [],
    expense: []
  };
}
---

<Layout title="FinanzApp - Reportes" currentPage="/reports">
  <!-- Page Header -->
  <div class="page-header">
    <div class="header-content">
      <h1>Reportes Financieros</h1>
      <p>Análisis detallado de tus finanzas personales</p>
    </div>
    <div class="header-actions">
      <Button variant="outline" size="small">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
        </svg>
        Exportar
      </Button>
    </div>
  </div>

  <!-- Monthly Summary -->
  <div class="grid grid-3 mb-3">
    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon income-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"/>
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Ingresos Totales</h3>
          <div class="summary-amount">{formatters.currency(monthlyReport.income)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon expense-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Gastos Totales</h3>
          <div class="summary-amount">{formatters.currency(monthlyReport.expense)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>

    <Card class="summary-card">
      <div class="summary-content">
        <div class="summary-icon balance-icon">
          <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="summary-info">
          <h3>Balance Neto</h3>
          <div class="summary-amount">{formatters.currency(monthlyReport.balance)}</div>
          <div class="summary-period">Este mes</div>
        </div>
      </div>
    </Card>
  </div>

  <!-- Charts Row -->
  <div class="grid grid-2 mb-3">
    <!-- Monthly Trend Chart -->
    <Card 
      title="Tendencia Mensual" 
      icon="<path d='M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z'/>"
    >
      <div class="chart-container">
        <canvas id="monthlyTrendChart"></canvas>
      </div>
    </Card>

    <!-- Category Distribution Chart -->
    <Card 
      title="Distribución por Categorías" 
      icon="<path d='M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z'/>"
    >
      <div class="chart-container">
        <canvas id="categoryDistributionChart"></canvas>
      </div>
    </Card>
  </div>

  <!-- Category Breakdown -->
  <Card 
    title="Desglose por Categorías" 
    icon="<path fill-rule='evenodd' d='M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z' clip-rule='evenodd'/>"
  >
    {categoryReport.categories.length > 0 ? (
      <div class="category-breakdown">
        {categoryReport.categories.map(category => {
          const percentage = categoryReport.total > 0 ? (category.amount / categoryReport.total) * 100 : 0;
          return (
            <div class="category-item">
              <div class="category-info">
                <div class="category-header">
                  <div class="category-color" style={`background-color: ${category.color}`}></div>
                  <span class="category-name">{category.name}</span>
                </div>
                <div class="category-amounts">
                  <span class="amount">{formatters.currency(category.amount)}</span>
                  <span class="percentage">({percentage.toFixed(1)}%)</span>
                </div>
              </div>
              <div class="category-progress">
                <div class="progress-bar">
                  <div 
                    class="progress-fill" 
                    style={`width: ${percentage}%; background-color: ${category.color}`}
                  ></div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    ) : (
      <div class="empty-state">
        <p>No hay datos de categorías disponibles</p>
      </div>
    )}
  </Card>

  <style>
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }

    .header-content h1 {
      color: #ffffff;
      font-size: 32px;
      font-weight: 700;
      margin-bottom: 8px;
    }

    .header-content p {
      color: #cccccc;
      font-size: 16px;
    }

    .header-actions {
      display: flex;
      gap: 12px;
    }

    .summary-card {
      background: #1A1A1A !important;
      border: 1px solid #333;
    }

    .summary-content {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .summary-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    .income-icon {
      background: linear-gradient(135deg, #4CAF50, #45a049);
    }

    .expense-icon {
      background: linear-gradient(135deg, #F44336, #d32f2f);
    }

    .balance-icon {
      background: linear-gradient(135deg, #2196F3, #1976D2);
    }

    .summary-info h3 {
      color: #cccccc;
      font-size: 14px;
      font-weight: 500;
      margin-bottom: 4px;
    }

    .summary-amount {
      color: #ffffff;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
    }

    .summary-period {
      color: #888888;
      font-size: 12px;
    }

    .chart-container {
      height: 300px;
      position: relative;
    }

    .category-breakdown {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    .category-item {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 16px;
      background: #1A1A1A;
      border-radius: 8px;
    }

    .category-info {
      flex: 1;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .category-header {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .category-color {
      width: 16px;
      height: 16px;
      border-radius: 4px;
    }

    .category-name {
      color: #ffffff;
      font-size: 16px;
      font-weight: 500;
    }

    .category-amounts {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .amount {
      color: #ffffff;
      font-size: 16px;
      font-weight: 600;
    }

    .percentage {
      color: #888888;
      font-size: 14px;
    }

    .category-progress {
      width: 200px;
    }

    .progress-bar {
      width: 100%;
      height: 8px;
      background: #333;
      border-radius: 4px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      border-radius: 4px;
      transition: width 0.3s ease;
    }

    .empty-state {
      text-align: center;
      padding: 40px;
      color: #888888;
    }

    .empty-state p {
      font-size: 16px;
    }
  </style>

  <script define:vars={{ monthlyReport, categoryReport, trendReport }}>
    // Initialize charts when the page loads
    document.addEventListener('DOMContentLoaded', function() {
      createMonthlyTrendChart();
      createCategoryDistributionChart();
    });

    function createMonthlyTrendChart() {
      const ctx = document.getElementById('monthlyTrendChart');
      if (!ctx) return;

      // Use real data from the server
      const months = trendReport.months || [];
      const incomeData = trendReport.income || [];
      const expenseData = trendReport.expense || [];

      new Chart(ctx, {
        type: 'line',
        data: {
          labels: months,
          datasets: [
            {
              label: 'Ingresos',
              data: incomeData,
              borderColor: '#4CAF50',
              backgroundColor: 'rgba(76, 175, 80, 0.1)',
              borderWidth: 2,
              fill: true,
              tension: 0.4
            },
            {
              label: 'Gastos',
              data: expenseData,
              borderColor: '#F44336',
              backgroundColor: 'rgba(244, 67, 54, 0.1)',
              borderWidth: 2,
              fill: true,
              tension: 0.4
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                color: '#cccccc',
                callback: function(value) {
                  return '€' + value;
                }
              },
              grid: {
                color: '#444'
              }
            },
            x: {
              ticks: {
                color: '#cccccc'
              },
              grid: {
                color: '#444'
              }
            }
          },
          plugins: {
            legend: {
              labels: {
                color: '#cccccc'
              }
            }
          }
        }
      });
    }

    function createCategoryDistributionChart() {
      const ctx = document.getElementById('categoryDistributionChart');
      if (!ctx) return;

      // Use real data from the server
      const categories = categoryReport.categories || [];
      const labels = categories.map(cat => cat.name);
      const data = categories.map(cat => cat.amount);
      const colors = categories.map(cat => cat.color);

      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: colors,
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: '#cccccc',
                padding: 20
              }
            }
          }
        }
      });
    }
  </script>
</Layout> 